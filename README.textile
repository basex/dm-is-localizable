h1. dm-is-localizable

Datamapper support for localization of (user entered) content in multilanguage applications

h3. Schema

* one xxx_translations table for every translatable resource
* xxx_translations belongs_to the resource to translate
* xxx_translations belongs_to a locale
* properties to be translated are defined in xxx_translations


h4. Advantages

  * Proper normalization and referential integrity
  * Easy to add a new language (add row to xxx_translations)
  * Easy to query
  * Columns keep their names


h4. Disadvantages (not really if you think about it)

  * One extra table for every resource that needs translations


h3. Example definition of a localizable model

The plugin comes with a @Locale@ model that already got required for you. This means that the underlying storage will be created automatically when you run @auto_migrate!@ or @auto_upgrade!@.

<pre>
<code>
class Item

  include DataMapper::Resource

  property :id, Serial

  is :localizable do        # same as is :localizable, :accept_nested_attributes => true do
    property :name, String
    property :desc, String
  end

end
</code>
</pre>

The above @Item@ model will define and thus be able to @DataMapper.auto_migrate!@ the @ItemTranslation@ model. The _naming convention_ used here is @"#{ClassToBeLocalized.name}Translation"@.

Preliminary support for changing this is available by using the @:model@ option like so (note that this isn't specced yet).

<pre>
<code>
DataMapper::Model.is :localizable, :model => 'ItemLocalization'
</code>
</pre>

Furthermore, the above @Item@ will automatically have the following instance methods defined.

<pre>
<code>
#item_translations_attributes
#item_translations_attributes=

# and handy aliases for the above

#translations_attributes
#translations_attributes=
</code>
</pre>

These are generated by "dm-accepts_nested_attributes":http://github.com/snusnu/dm-accepts_nested_attributes and allow for easy manipulation of the localizable properties from say forms in a web application. For more information on working with nested attributes, have a look at the documentation at the "README":http://github.com/snusnu/dm-accepts_nested_attributes for "dm-accepts_nested_attributes":http://github.com/snusnu/dm-accepts_nested_attributes

Of course you can turn this behavior off by specifying the @is :localizable, :accept_nested_attributes => false do .. end@

The resulting model you get when calling @Item.is(:localizable)@ looks like this:

<pre>
<code>
class ItemTranslation

  include DataMapper::Resource

  property :id,        Serial

  property :item_id,   Integer, :required => true, :unique_index => :unique_locales
  property :locale_id, Integer, :required => true, :unique_index => :unique_locales

  property :name,      String
  property :desc,      String

  validates_is_unique :locale_id, :scope => :item_id

  belongs_to :item
  belongs_to :locale

end
</code>
</pre>

Furthermore, the following API gets defined on the @Item@ class:

<pre>
<code>
class Item

  include DataMapper::Resource

  property :id, Serial

  is :localizable do
    property :name, String
    property :desc, String
  end

  # ----------------------------
  #   added by is :localizable
  # ----------------------------

  has n, :item_translations
  has n, :locales, :through => :item_translations

  # and a handy alias
  alias :translations :item_translations

  # helper method to get at ItemTranslation
  def translation_model
    @translation_model
  end

  # -------------------
  #   class level API
  # -------------------

  # list all available locales for the localizable model
  def available_locales
    ids = translation_model.all.map { |t| t.locale_id }.uniq
    ids.any? ? Locale.all(:id => ids) : []
  end

  # the number of all available locales for the localizable model
  def nr_of_available_locales
    available_locales.size
  end

  # checks if all localizable resources are translated in all available locales
  def translations_complete?
    available_locales.size * all.size == translation_model.all.size
  end

  # returns a list of symbols reflecting all localizable property names of this resource
  def localizable_properties
    translation_model.properties.map { |p| p.name } - non_localizable_properties
  end

  # returns a list of symbols reflecting the names of all the
  # not localizable properties in the remixed translation_model
  def non_localizable_properties
    [ :id, :locale_id, DataMapper::Inflector.foreign_key(self.name).to_sym ]
  end


  # ----------------------
  #   instance level API
  # ----------------------

  # list all available locales for this instance
  def available_locales
    ids = translations.map { |t| t.locale_id }.uniq
    ids.any? ? Locale.all(:id => ids) : []
  end

  # the number of all available locales for this instance
  def nr_of_available_locales
    available_locales.size
  end

  # checks if this instance is translated into all available locales for this model
  def translations_complete?
    self.class.nr_of_available_locales == translations.size
  end

  # translates the given attribute to the locale identified by the given locale_code
  def translate(attribute, locale_tag)
    if locale = Locale.for(locale_tag)
      t = translations.first(:locale => locale)
      t.respond_to?(attribute) ? t.send(attribute) : nil
    else
      nil
    end
  end

  # translates the :name property to the given locale
  def name(locale_tag)
    translate(:name, locale_tag)
  end

  # translates the :desc property to the given locale
  def desc(locale_tag)
    translate(:desc, locale_tag)
  end


  # ----------------------------------------
  #   added by dm-accepts_nested_attributes
  # ----------------------------------------


  def item_translations_attributes
    # ...
  end

  def item_translations_attributes=(attributes_or_attributes_collection)
    # ...
  end

  # and handy aliases for the above

  alias :translations_attributes  :item_translations_attributes
  alias :translations_attributes= :item_translations_attributes


  # TODO
  # more API to support common usecases (and i18n/l10n solutions)

end
</code>
</pre>

h3. Inspired by (thx guys!)

* Neil Barnwell's comment on the top voted answer to "Schema for a multilocale database":http://stackoverflow.com/questions/316780/schema-for-a-multilocale-database

* Gabi Solomon's option (4) at this blog post on "Multilocale database design approach":http://www.gsdesign.ro/blog/multilocale-database-design-approach/


h3. Copyright

Copyright (c) 2009 Martin Gamsjaeger (snusnu). See "LICENSE":http://github.com/snusnu/dm-is-localizable/tree/master/LICENSE for details.
